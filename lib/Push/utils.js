'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPushIncrementing = isPushIncrementing;
exports.getLocalesFromPush = getLocalesFromPush;
exports.transformPushBodyForLocale = transformPushBodyForLocale;
exports.stripLocalesFromBody = stripLocalesFromBody;
exports.bodiesPerLocales = bodiesPerLocales;
exports.groupByLocaleIdentifier = groupByLocaleIdentifier;
exports.validatePushType = validatePushType;
exports.applyDeviceTokenExists = applyDeviceTokenExists;
exports.getIdRange = getIdRange;

var _node = require('parse/node');

var _node2 = _interopRequireDefault(_node);

var _deepcopy = require('deepcopy');

var _deepcopy2 = _interopRequireDefault(_deepcopy);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isPushIncrementing(body) {
  if (!body.data || !body.data.badge) {
    return false;
  }

  const badge = body.data.badge;
  if (typeof badge == 'string' && badge.toLowerCase() == "increment") {
    return true;
  }

  return typeof badge == 'object' && typeof badge.__op == 'string' && badge.__op.toLowerCase() == "increment" && Number(badge.amount);
}

const localizableKeys = ['alert', 'title'];

function getLocalesFromPush(body) {
  const data = body.data;
  if (!data) {
    return [];
  }
  return [...new Set(Object.keys(data).reduce((memo, key) => {
    localizableKeys.forEach(localizableKey => {
      if (key.indexOf(`${localizableKey}-`) == 0) {
        memo.push(key.slice(localizableKey.length + 1));
      }
    });
    return memo;
  }, []))];
}

function transformPushBodyForLocale(body, locale) {
  const data = body.data;
  if (!data) {
    return body;
  }
  body = (0, _deepcopy2.default)(body);
  localizableKeys.forEach(key => {
    const localeValue = body.data[`${key}-${locale}`];
    if (localeValue) {
      body.data[key] = localeValue;
    }
  });
  return stripLocalesFromBody(body);
}

function stripLocalesFromBody(body) {
  if (!body.data) {
    return body;
  }
  Object.keys(body.data).forEach(key => {
    localizableKeys.forEach(localizableKey => {
      if (key.indexOf(`${localizableKey}-`) == 0) {
        delete body.data[key];
      }
    });
  });
  return body;
}

function bodiesPerLocales(body, locales = []) {
  // Get all tranformed bodies for each locale
  const result = locales.reduce((memo, locale) => {
    memo[locale] = transformPushBodyForLocale(body, locale);
    return memo;
  }, {});
  // Set the default locale, with the stripped body
  result.default = stripLocalesFromBody(body);
  return result;
}

function groupByLocaleIdentifier(installations, locales = []) {
  return installations.reduce((map, installation) => {
    let added = false;
    locales.forEach(locale => {
      if (added) {
        return;
      }
      if (installation.localeIdentifier && installation.localeIdentifier.indexOf(locale) === 0) {
        added = true;
        map[locale] = map[locale] || [];
        map[locale].push(installation);
      }
    });
    if (!added) {
      map.default.push(installation);
    }
    return map;
  }, { default: [] });
}

/**
 * Check whether the deviceType parameter in qury condition is valid or not.
 * @param {Object} where A query condition
 * @param {Array} validPushTypes An array of valid push types(string)
 */
function validatePushType(where = {}, validPushTypes = []) {
  var deviceTypeField = where.deviceType || {};
  var deviceTypes = [];
  if (typeof deviceTypeField === 'string') {
    deviceTypes.push(deviceTypeField);
  } else if (Array.isArray(deviceTypeField['$in'])) {
    deviceTypes.concat(deviceTypeField['$in']);
  }
  for (var i = 0; i < deviceTypes.length; i++) {
    var deviceType = deviceTypes[i];
    if (validPushTypes.indexOf(deviceType) < 0) {
      throw new _node2.default.Error(_node2.default.Error.PUSH_MISCONFIGURED, deviceType + ' is not supported push type.');
    }
  }
}

function applyDeviceTokenExists(where) {
  where = (0, _deepcopy2.default)(where);
  if (!where.hasOwnProperty('deviceToken')) {
    where['deviceToken'] = { '$gt': '' }; // change $exists by $gt for better performance
  }
  return where;
}

const createIdRanges = chars => {
  const c = ('0123456789' + 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz').split('');
  return _lodash2.default.flatten(c.map(c1 => (chars || c).map(c2 => c1 + c2)));
};
let chars = null;
function getIdRange(page, maxPages) {
  if (maxPages === 1) return;
  if (page + 1 > maxPages) throw `Page should be between 0 and ${maxPages - 1}`;
  // creates 14776336 ranges
  if (!chars) chars = createIdRanges(createIdRanges(createIdRanges()));
  const idi = Math.ceil(chars.length / maxPages * page);
  const ci = chars[idi] || 'zzzzzzzzzz';
  const idf = Math.ceil(chars.length / maxPages * (page + 1));
  const cf = chars[idf] || '';
  if (page === 0) return { $lte: cf };else if (page + 1 === maxPages) return { $gt: ci };
  return { $gt: ci, $lte: cf };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9QdXNoL3V0aWxzLmpzIl0sIm5hbWVzIjpbImlzUHVzaEluY3JlbWVudGluZyIsImdldExvY2FsZXNGcm9tUHVzaCIsInRyYW5zZm9ybVB1c2hCb2R5Rm9yTG9jYWxlIiwic3RyaXBMb2NhbGVzRnJvbUJvZHkiLCJib2RpZXNQZXJMb2NhbGVzIiwiZ3JvdXBCeUxvY2FsZUlkZW50aWZpZXIiLCJ2YWxpZGF0ZVB1c2hUeXBlIiwiYXBwbHlEZXZpY2VUb2tlbkV4aXN0cyIsImdldElkUmFuZ2UiLCJib2R5IiwiZGF0YSIsImJhZGdlIiwidG9Mb3dlckNhc2UiLCJfX29wIiwiTnVtYmVyIiwiYW1vdW50IiwibG9jYWxpemFibGVLZXlzIiwiU2V0IiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsIm1lbW8iLCJrZXkiLCJmb3JFYWNoIiwibG9jYWxpemFibGVLZXkiLCJpbmRleE9mIiwicHVzaCIsInNsaWNlIiwibGVuZ3RoIiwibG9jYWxlIiwibG9jYWxlVmFsdWUiLCJsb2NhbGVzIiwicmVzdWx0IiwiZGVmYXVsdCIsImluc3RhbGxhdGlvbnMiLCJtYXAiLCJpbnN0YWxsYXRpb24iLCJhZGRlZCIsImxvY2FsZUlkZW50aWZpZXIiLCJ3aGVyZSIsInZhbGlkUHVzaFR5cGVzIiwiZGV2aWNlVHlwZUZpZWxkIiwiZGV2aWNlVHlwZSIsImRldmljZVR5cGVzIiwiQXJyYXkiLCJpc0FycmF5IiwiY29uY2F0IiwiaSIsIlBhcnNlIiwiRXJyb3IiLCJQVVNIX01JU0NPTkZJR1VSRUQiLCJoYXNPd25Qcm9wZXJ0eSIsImNyZWF0ZUlkUmFuZ2VzIiwiY2hhcnMiLCJjIiwic3BsaXQiLCJfIiwiZmxhdHRlbiIsImMxIiwiYzIiLCJwYWdlIiwibWF4UGFnZXMiLCJpZGkiLCJNYXRoIiwiY2VpbCIsImNpIiwiaWRmIiwiY2YiLCIkbHRlIiwiJGd0Il0sIm1hcHBpbmdzIjoiOzs7OztRQUlnQkEsa0IsR0FBQUEsa0I7UUFnQkFDLGtCLEdBQUFBLGtCO1FBZUFD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LEtBQUtDLEVBQTVCLENBQVosQ0FBVixDQUFQO0FBQ0QsQ0FIRDtBQUlBLElBQUlOLFFBQVEsSUFBWjtBQUNPLFNBQVM3QyxVQUFULENBQW9Cb0QsSUFBcEIsRUFBMEJDLFFBQTFCLEVBQW9DO0FBQ3pDLE1BQUlBLGFBQWEsQ0FBakIsRUFBb0I7QUFDcEIsTUFBS0QsT0FBTyxDQUFSLEdBQWFDLFFBQWpCLEVBQTJCLE1BQU8sZ0NBQStCQSxXQUFXLENBQUUsRUFBbkQ7QUFDM0I7QUFDQSxNQUFJLENBQUNSLEtBQUwsRUFBWUEsUUFBUUQsZUFBZUEsZUFBZUEsZ0JBQWYsQ0FBZixDQUFSO0FBQ1osUUFBTVUsTUFBTUMsS0FBS0MsSUFBTCxDQUFVWCxNQUFNekIsTUFBTixHQUFlaUMsUUFBZixHQUEwQkQsSUFBcEMsQ0FBWjtBQUNBLFFBQU1LLEtBQUtaLE1BQU1TLEdBQU4sS0FBYyxZQUF6QjtBQUNBLFFBQU1JLE1BQU1ILEtBQUtDLElBQUwsQ0FBVVgsTUFBTXpCLE1BQU4sR0FBZWlDLFFBQWYsSUFBMkJELE9BQU8sQ0FBbEMsQ0FBVixDQUFaO0FBQ0EsUUFBTU8sS0FBS2QsTUFBTWEsR0FBTixLQUFjLEVBQXpCO0FBQ0EsTUFBSU4sU0FBUyxDQUFiLEVBQWdCLE9BQU8sRUFBQ1EsTUFBTUQsRUFBUCxFQUFQLENBQWhCLEtBQ0ssSUFBS1AsT0FBTyxDQUFSLEtBQWVDLFFBQW5CLEVBQTZCLE9BQU8sRUFBQ1EsS0FBS0osRUFBTixFQUFQO0FBQ2xDLFNBQU8sRUFBQ0ksS0FBS0osRUFBTixFQUFVRyxNQUFNRCxFQUFoQixFQUFQO0FBQ0QiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGFyc2UgICAgZnJvbSAncGFyc2Uvbm9kZSc7XG5pbXBvcnQgZGVlcGNvcHkgZnJvbSAnZGVlcGNvcHknO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHVzaEluY3JlbWVudGluZyhib2R5KSB7XG4gIGlmICghYm9keS5kYXRhIHx8ICFib2R5LmRhdGEuYmFkZ2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBiYWRnZSA9IGJvZHkuZGF0YS5iYWRnZTtcbiAgaWYgKHR5cGVvZiBiYWRnZSA9PSAnc3RyaW5nJyAmJiBiYWRnZS50b0xvd2VyQ2FzZSgpID09IFwiaW5jcmVtZW50XCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0eXBlb2YgYmFkZ2UgPT0gJ29iamVjdCcgJiYgdHlwZW9mIGJhZGdlLl9fb3AgPT0gJ3N0cmluZycgJiZcbiAgICAgICAgIGJhZGdlLl9fb3AudG9Mb3dlckNhc2UoKSA9PSBcImluY3JlbWVudFwiICYmIE51bWJlcihiYWRnZS5hbW91bnQpO1xufVxuXG5jb25zdCBsb2NhbGl6YWJsZUtleXMgPSBbJ2FsZXJ0JywgJ3RpdGxlJ107XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbGVzRnJvbVB1c2goYm9keSkge1xuICBjb25zdCBkYXRhID0gYm9keS5kYXRhO1xuICBpZiAoIWRhdGEpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0dXJuIFsuLi5uZXcgU2V0KE9iamVjdC5rZXlzKGRhdGEpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgbG9jYWxpemFibGVLZXlzLmZvckVhY2goKGxvY2FsaXphYmxlS2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LmluZGV4T2YoYCR7bG9jYWxpemFibGVLZXl9LWApID09IDApIHtcbiAgICAgICAgbWVtby5wdXNoKGtleS5zbGljZShsb2NhbGl6YWJsZUtleS5sZW5ndGggKyAxKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1lbW87XG4gIH0sIFtdKSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUHVzaEJvZHlGb3JMb2NhbGUoYm9keSwgbG9jYWxlKSB7XG4gIGNvbnN0IGRhdGEgPSBib2R5LmRhdGE7XG4gIGlmICghZGF0YSkge1xuICAgIHJldHVybiBib2R5O1xuICB9XG4gIGJvZHkgPSBkZWVwY29weShib2R5KTtcbiAgbG9jYWxpemFibGVLZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGNvbnN0IGxvY2FsZVZhbHVlID0gYm9keS5kYXRhW2Ake2tleX0tJHtsb2NhbGV9YF07XG4gICAgaWYgKGxvY2FsZVZhbHVlKSB7XG4gICAgICBib2R5LmRhdGFba2V5XSA9IGxvY2FsZVZhbHVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzdHJpcExvY2FsZXNGcm9tQm9keShib2R5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwTG9jYWxlc0Zyb21Cb2R5KGJvZHkpIHtcbiAgaWYgKCFib2R5LmRhdGEpIHsgcmV0dXJuIGJvZHk7IH1cbiAgT2JqZWN0LmtleXMoYm9keS5kYXRhKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBsb2NhbGl6YWJsZUtleXMuZm9yRWFjaCgobG9jYWxpemFibGVLZXkpID0+IHtcbiAgICAgIGlmIChrZXkuaW5kZXhPZihgJHtsb2NhbGl6YWJsZUtleX0tYCkgPT0gMCkge1xuICAgICAgICBkZWxldGUgYm9keS5kYXRhW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gYm9keTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJvZGllc1BlckxvY2FsZXMoYm9keSwgbG9jYWxlcyA9IFtdKSB7XG4gIC8vIEdldCBhbGwgdHJhbmZvcm1lZCBib2RpZXMgZm9yIGVhY2ggbG9jYWxlXG4gIGNvbnN0IHJlc3VsdCA9IGxvY2FsZXMucmVkdWNlKChtZW1vLCBsb2NhbGUpID0+IHtcbiAgICBtZW1vW2xvY2FsZV0gPSB0cmFuc2Zvcm1QdXNoQm9keUZvckxvY2FsZShib2R5LCBsb2NhbGUpO1xuICAgIHJldHVybiBtZW1vO1xuICB9LCB7fSk7XG4gIC8vIFNldCB0aGUgZGVmYXVsdCBsb2NhbGUsIHdpdGggdGhlIHN0cmlwcGVkIGJvZHlcbiAgcmVzdWx0LmRlZmF1bHQgPSBzdHJpcExvY2FsZXNGcm9tQm9keShib2R5KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwQnlMb2NhbGVJZGVudGlmaWVyKGluc3RhbGxhdGlvbnMsIGxvY2FsZXMgPSBbXSkge1xuICByZXR1cm4gaW5zdGFsbGF0aW9ucy5yZWR1Y2UoKG1hcCwgaW5zdGFsbGF0aW9uKSA9PiB7XG4gICAgbGV0IGFkZGVkID0gZmFsc2U7XG4gICAgbG9jYWxlcy5mb3JFYWNoKChsb2NhbGUpID0+IHtcbiAgICAgIGlmIChhZGRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaW5zdGFsbGF0aW9uLmxvY2FsZUlkZW50aWZpZXIgJiYgaW5zdGFsbGF0aW9uLmxvY2FsZUlkZW50aWZpZXIuaW5kZXhPZihsb2NhbGUpID09PSAwKSB7XG4gICAgICAgIGFkZGVkID0gdHJ1ZTtcbiAgICAgICAgbWFwW2xvY2FsZV0gPSBtYXBbbG9jYWxlXSB8fCBbXTtcbiAgICAgICAgbWFwW2xvY2FsZV0ucHVzaChpbnN0YWxsYXRpb24pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghYWRkZWQpIHtcbiAgICAgIG1hcC5kZWZhdWx0LnB1c2goaW5zdGFsbGF0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbiAgfSwge2RlZmF1bHQ6IFtdfSk7XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgZGV2aWNlVHlwZSBwYXJhbWV0ZXIgaW4gcXVyeSBjb25kaXRpb24gaXMgdmFsaWQgb3Igbm90LlxuICogQHBhcmFtIHtPYmplY3R9IHdoZXJlIEEgcXVlcnkgY29uZGl0aW9uXG4gKiBAcGFyYW0ge0FycmF5fSB2YWxpZFB1c2hUeXBlcyBBbiBhcnJheSBvZiB2YWxpZCBwdXNoIHR5cGVzKHN0cmluZylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUHVzaFR5cGUod2hlcmUgPSB7fSwgdmFsaWRQdXNoVHlwZXMgPSBbXSkge1xuICB2YXIgZGV2aWNlVHlwZUZpZWxkID0gd2hlcmUuZGV2aWNlVHlwZSB8fCB7fTtcbiAgdmFyIGRldmljZVR5cGVzID0gW107XG4gIGlmICh0eXBlb2YgZGV2aWNlVHlwZUZpZWxkID09PSAnc3RyaW5nJykge1xuICAgIGRldmljZVR5cGVzLnB1c2goZGV2aWNlVHlwZUZpZWxkKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRldmljZVR5cGVGaWVsZFsnJGluJ10pKSB7XG4gICAgZGV2aWNlVHlwZXMuY29uY2F0KGRldmljZVR5cGVGaWVsZFsnJGluJ10pO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGV2aWNlVHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGV2aWNlVHlwZSA9IGRldmljZVR5cGVzW2ldO1xuICAgIGlmICh2YWxpZFB1c2hUeXBlcy5pbmRleE9mKGRldmljZVR5cGUpIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLlBVU0hfTUlTQ09ORklHVVJFRCxcbiAgICAgICAgZGV2aWNlVHlwZSArICcgaXMgbm90IHN1cHBvcnRlZCBwdXNoIHR5cGUuJyk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseURldmljZVRva2VuRXhpc3RzKHdoZXJlKSB7XG4gIHdoZXJlID0gZGVlcGNvcHkod2hlcmUpO1xuICBpZiAoIXdoZXJlLmhhc093blByb3BlcnR5KCdkZXZpY2VUb2tlbicpKSB7XG4gICAgd2hlcmVbJ2RldmljZVRva2VuJ10gPSB7JyRndCc6ICcnfTsgLy8gY2hhbmdlICRleGlzdHMgYnkgJGd0IGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VcbiAgfVxuICByZXR1cm4gd2hlcmU7XG59XG5cbmNvbnN0IGNyZWF0ZUlkUmFuZ2VzID0gY2hhcnMgPT4ge1xuICBjb25zdCBjID0gKCcwMTIzNDU2Nzg5JyArICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicgKyAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonKS5zcGxpdCgnJylcbiAgcmV0dXJuIF8uZmxhdHRlbihjLm1hcChjMSA9PiAoY2hhcnMgfHwgYykubWFwKGMyID0+IGMxICsgYzIpKSk7XG59XG5sZXQgY2hhcnMgPSBudWxsXG5leHBvcnQgZnVuY3Rpb24gZ2V0SWRSYW5nZShwYWdlLCBtYXhQYWdlcykge1xuICBpZiAobWF4UGFnZXMgPT09IDEpIHJldHVyblxuICBpZiAoKHBhZ2UgKyAxKSA+IG1heFBhZ2VzKSB0aHJvdyBgUGFnZSBzaG91bGQgYmUgYmV0d2VlbiAwIGFuZCAke21heFBhZ2VzIC0gMX1gXG4gIC8vIGNyZWF0ZXMgMTQ3NzYzMzYgcmFuZ2VzXG4gIGlmICghY2hhcnMpIGNoYXJzID0gY3JlYXRlSWRSYW5nZXMoY3JlYXRlSWRSYW5nZXMoY3JlYXRlSWRSYW5nZXMoKSkpXG4gIGNvbnN0IGlkaSA9IE1hdGguY2VpbChjaGFycy5sZW5ndGggLyBtYXhQYWdlcyAqIHBhZ2UpXG4gIGNvbnN0IGNpID0gY2hhcnNbaWRpXSB8fCAnenp6enp6enp6eidcbiAgY29uc3QgaWRmID0gTWF0aC5jZWlsKGNoYXJzLmxlbmd0aCAvIG1heFBhZ2VzICogKHBhZ2UgKyAxKSlcbiAgY29uc3QgY2YgPSBjaGFyc1tpZGZdIHx8ICcnXG4gIGlmIChwYWdlID09PSAwKSByZXR1cm4geyRsdGU6IGNmfVxuICBlbHNlIGlmICgocGFnZSArIDEpID09PSBtYXhQYWdlcykgcmV0dXJuIHskZ3Q6IGNpfVxuICByZXR1cm4geyRndDogY2ksICRsdGU6IGNmfVxufVxuIl19