"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PushQueue = void 0;

var _ParseMessageQueue = require("../ParseMessageQueue");

var _rest = _interopRequireDefault(require("../rest"));

var _utils = require("./utils");

var _node = _interopRequireDefault(require("parse/node"));

var _logger = _interopRequireDefault(require("../logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PUSH_CHANNEL = 'parse-server-push';
const DEFAULT_BATCH_SIZE = 100;

class PushQueue {
  // config object of the publisher, right now it only contains the redisURL,
  // but we may extend it later.
  constructor(config = {}) {
    this.channel = config.channel || PushQueue.defaultPushChannel();
    this.batchSize = config.batchSize || DEFAULT_BATCH_SIZE;
    this.parsePublisher = _ParseMessageQueue.ParseMessageQueue.createPublisher(config);
  }

  static defaultPushChannel() {
    return `${_node.default.applicationId}-${PUSH_CHANNEL}`;
  }

  enqueue(body, where, config, auth, pushStatus) {
    const limit = this.batchSize;
    where = (0, _utils.applyDeviceTokenExists)(where); // Order by objectId so no impact on the DB
    // const order = 'objectId';

    return Promise.resolve().then(() => {
      return _rest.default.find(config, auth, '_Installation', where, {
        limit: 0,
        count: true
      });
    }).then(({
      results,
      count
    }) => {
      if (!results || count == 0) {
        return pushStatus.complete();
      }

      const maxPages = Math.ceil(count / limit);
      pushStatus.setRunning(maxPages);

      _logger.default.info(`All ${maxPages} packages were enqueued for PushStatus ${pushStatus.objectId}`); // while (page < maxPages) {
      // changes request/limit/orderBy by id range intervals for better performance
      // https://docs.mongodb.com/manual/reference/method/cursor.skip/
      // Range queries can use indexes to avoid scanning unwanted documents,
      // typically yielding better performance as the offset grows compared
      // to using cursor.skip() for pagination.


      const query = {
        where
      };
      const pushWorkItem = {
        body,
        query,
        maxPages,
        pushStatus: {
          objectId: pushStatus.objectId
        },
        applicationId: config.applicationId
      };
      const publishResult = Promise.resolve(this.parsePublisher.publish(this.channel, JSON.stringify(pushWorkItem)));
      return publishResult.then(reponse => {
        const result = reponse && reponse.data || reponse;

        _logger.default.info(`All ${maxPages} packages were enqueued for PushStatus ${pushStatus.objectId}`, result);

        return result;
      });
    }).catch(err => {
      _logger.default.info(`Can't count installations for PushStatus ${pushStatus.objectId}: ${err.message}`);

      throw err;
    });
  }

}

exports.PushQueue = PushQueue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9QdXNoL1B1c2hRdWV1ZS5qcyJdLCJuYW1lcyI6WyJQVVNIX0NIQU5ORUwiLCJERUZBVUxUX0JBVENIX1NJWkUiLCJQdXNoUXVldWUiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImNoYW5uZWwiLCJkZWZhdWx0UHVzaENoYW5uZWwiLCJiYXRjaFNpemUiLCJwYXJzZVB1Ymxpc2hlciIsIlBhcnNlTWVzc2FnZVF1ZXVlIiwiY3JlYXRlUHVibGlzaGVyIiwiUGFyc2UiLCJhcHBsaWNhdGlvbklkIiwiZW5xdWV1ZSIsImJvZHkiLCJ3aGVyZSIsImF1dGgiLCJwdXNoU3RhdHVzIiwibGltaXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJyZXN0IiwiZmluZCIsImNvdW50IiwicmVzdWx0cyIsImNvbXBsZXRlIiwibWF4UGFnZXMiLCJNYXRoIiwiY2VpbCIsInNldFJ1bm5pbmciLCJsb2ciLCJpbmZvIiwib2JqZWN0SWQiLCJxdWVyeSIsInB1c2hXb3JrSXRlbSIsInB1Ymxpc2hSZXN1bHQiLCJwdWJsaXNoIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlcG9uc2UiLCJyZXN1bHQiLCJkYXRhIiwiY2F0Y2giLCJlcnIiLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxZQUFZLEdBQUcsbUJBQXJCO0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUcsR0FBM0I7O0FBRU8sTUFBTUMsU0FBTixDQUFnQjtBQUtyQjtBQUNBO0FBQ0FDLEVBQUFBLFdBQVcsQ0FBQ0MsTUFBVyxHQUFHLEVBQWYsRUFBbUI7QUFDNUIsU0FBS0MsT0FBTCxHQUFlRCxNQUFNLENBQUNDLE9BQVAsSUFBa0JILFNBQVMsQ0FBQ0ksa0JBQVYsRUFBakM7QUFDQSxTQUFLQyxTQUFMLEdBQWlCSCxNQUFNLENBQUNHLFNBQVAsSUFBb0JOLGtCQUFyQztBQUNBLFNBQUtPLGNBQUwsR0FBc0JDLHFDQUFrQkMsZUFBbEIsQ0FBa0NOLE1BQWxDLENBQXRCO0FBQ0Q7O0FBRUQsU0FBT0Usa0JBQVAsR0FBNEI7QUFDMUIsV0FBUSxHQUFFSyxjQUFNQyxhQUFjLElBQUdaLFlBQWEsRUFBOUM7QUFDRDs7QUFFRGEsRUFBQUEsT0FBTyxDQUFDQyxJQUFELEVBQU9DLEtBQVAsRUFBY1gsTUFBZCxFQUFzQlksSUFBdEIsRUFBNEJDLFVBQTVCLEVBQXdDO0FBQzdDLFVBQU1DLEtBQUssR0FBRyxLQUFLWCxTQUFuQjtBQUVBUSxJQUFBQSxLQUFLLEdBQUcsbUNBQXVCQSxLQUF2QixDQUFSLENBSDZDLENBSzdDO0FBQ0E7O0FBQ0EsV0FBT0ksT0FBTyxDQUFDQyxPQUFSLEdBQ0pDLElBREksQ0FDQyxNQUFNO0FBQ1YsYUFBT0MsY0FBS0MsSUFBTCxDQUFVbkIsTUFBVixFQUFrQlksSUFBbEIsRUFBd0IsZUFBeEIsRUFBeUNELEtBQXpDLEVBQWdEO0FBQ3JERyxRQUFBQSxLQUFLLEVBQUUsQ0FEOEM7QUFFckRNLFFBQUFBLEtBQUssRUFBRTtBQUY4QyxPQUFoRCxDQUFQO0FBSUQsS0FOSSxFQU9KSCxJQVBJLENBT0MsQ0FBQztBQUFFSSxNQUFBQSxPQUFGO0FBQVdELE1BQUFBO0FBQVgsS0FBRCxLQUF3QjtBQUM1QixVQUFJLENBQUNDLE9BQUQsSUFBWUQsS0FBSyxJQUFJLENBQXpCLEVBQTRCO0FBQzFCLGVBQU9QLFVBQVUsQ0FBQ1MsUUFBWCxFQUFQO0FBQ0Q7O0FBQ0QsWUFBTUMsUUFBUSxHQUFHQyxJQUFJLENBQUNDLElBQUwsQ0FBVUwsS0FBSyxHQUFHTixLQUFsQixDQUFqQjtBQUNBRCxNQUFBQSxVQUFVLENBQUNhLFVBQVgsQ0FBc0JILFFBQXRCOztBQUNBSSxzQkFBSUMsSUFBSixDQUNHLE9BQU1MLFFBQVMsMENBQ2RWLFVBQVUsQ0FBQ2dCLFFBQ1osRUFISCxFQU40QixDQVc1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFlBQU1DLEtBQUssR0FBRztBQUFFbkIsUUFBQUE7QUFBRixPQUFkO0FBRUEsWUFBTW9CLFlBQVksR0FBRztBQUNuQnJCLFFBQUFBLElBRG1CO0FBRW5Cb0IsUUFBQUEsS0FGbUI7QUFHbkJQLFFBQUFBLFFBSG1CO0FBSW5CVixRQUFBQSxVQUFVLEVBQUU7QUFBRWdCLFVBQUFBLFFBQVEsRUFBRWhCLFVBQVUsQ0FBQ2dCO0FBQXZCLFNBSk87QUFLbkJyQixRQUFBQSxhQUFhLEVBQUVSLE1BQU0sQ0FBQ1E7QUFMSCxPQUFyQjtBQU9BLFlBQU13QixhQUFhLEdBQUdqQixPQUFPLENBQUNDLE9BQVIsQ0FDcEIsS0FBS1osY0FBTCxDQUFvQjZCLE9BQXBCLENBQ0UsS0FBS2hDLE9BRFAsRUFFRWlDLElBQUksQ0FBQ0MsU0FBTCxDQUFlSixZQUFmLENBRkYsQ0FEb0IsQ0FBdEI7QUFNQSxhQUFPQyxhQUFhLENBQUNmLElBQWQsQ0FBbUJtQixPQUFPLElBQUk7QUFDbkMsY0FBTUMsTUFBTSxHQUFHRCxPQUFPLElBQUlBLE9BQU8sQ0FBQ0UsSUFBbkIsSUFBMkJGLE9BQTFDOztBQUNBVCx3QkFBSUMsSUFBSixDQUNHLE9BQU1MLFFBQVMsMENBQ2RWLFVBQVUsQ0FBQ2dCLFFBQ1osRUFISCxFQUlFUSxNQUpGOztBQU1BLGVBQU9BLE1BQVA7QUFDRCxPQVRNLENBQVA7QUFVRCxLQWpESSxFQWtESkUsS0FsREksQ0FrREVDLEdBQUcsSUFBSTtBQUNaYixzQkFBSUMsSUFBSixDQUNHLDRDQUEyQ2YsVUFBVSxDQUFDZ0IsUUFBUyxLQUM5RFcsR0FBRyxDQUFDQyxPQUNMLEVBSEg7O0FBS0EsWUFBTUQsR0FBTjtBQUNELEtBekRJLENBQVA7QUEwREQ7O0FBbEZvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhcnNlTWVzc2FnZVF1ZXVlIH0gZnJvbSAnLi4vUGFyc2VNZXNzYWdlUXVldWUnO1xuaW1wb3J0IHJlc3QgZnJvbSAnLi4vcmVzdCc7XG5pbXBvcnQgeyBhcHBseURldmljZVRva2VuRXhpc3RzIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgUGFyc2UgZnJvbSAncGFyc2Uvbm9kZSc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5cbmNvbnN0IFBVU0hfQ0hBTk5FTCA9ICdwYXJzZS1zZXJ2ZXItcHVzaCc7XG5jb25zdCBERUZBVUxUX0JBVENIX1NJWkUgPSAxMDA7XG5cbmV4cG9ydCBjbGFzcyBQdXNoUXVldWUge1xuICBwYXJzZVB1Ymxpc2hlcjogT2JqZWN0O1xuICBjaGFubmVsOiBTdHJpbmc7XG4gIGJhdGNoU2l6ZTogTnVtYmVyO1xuXG4gIC8vIGNvbmZpZyBvYmplY3Qgb2YgdGhlIHB1Ymxpc2hlciwgcmlnaHQgbm93IGl0IG9ubHkgY29udGFpbnMgdGhlIHJlZGlzVVJMLFxuICAvLyBidXQgd2UgbWF5IGV4dGVuZCBpdCBsYXRlci5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBhbnkgPSB7fSkge1xuICAgIHRoaXMuY2hhbm5lbCA9IGNvbmZpZy5jaGFubmVsIHx8IFB1c2hRdWV1ZS5kZWZhdWx0UHVzaENoYW5uZWwoKTtcbiAgICB0aGlzLmJhdGNoU2l6ZSA9IGNvbmZpZy5iYXRjaFNpemUgfHwgREVGQVVMVF9CQVRDSF9TSVpFO1xuICAgIHRoaXMucGFyc2VQdWJsaXNoZXIgPSBQYXJzZU1lc3NhZ2VRdWV1ZS5jcmVhdGVQdWJsaXNoZXIoY29uZmlnKTtcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHVzaENoYW5uZWwoKSB7XG4gICAgcmV0dXJuIGAke1BhcnNlLmFwcGxpY2F0aW9uSWR9LSR7UFVTSF9DSEFOTkVMfWA7XG4gIH1cblxuICBlbnF1ZXVlKGJvZHksIHdoZXJlLCBjb25maWcsIGF1dGgsIHB1c2hTdGF0dXMpIHtcbiAgICBjb25zdCBsaW1pdCA9IHRoaXMuYmF0Y2hTaXplO1xuXG4gICAgd2hlcmUgPSBhcHBseURldmljZVRva2VuRXhpc3RzKHdoZXJlKTtcblxuICAgIC8vIE9yZGVyIGJ5IG9iamVjdElkIHNvIG5vIGltcGFjdCBvbiB0aGUgREJcbiAgICAvLyBjb25zdCBvcmRlciA9ICdvYmplY3RJZCc7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiByZXN0LmZpbmQoY29uZmlnLCBhdXRoLCAnX0luc3RhbGxhdGlvbicsIHdoZXJlLCB7XG4gICAgICAgICAgbGltaXQ6IDAsXG4gICAgICAgICAgY291bnQ6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCh7IHJlc3VsdHMsIGNvdW50IH0pID0+IHtcbiAgICAgICAgaWYgKCFyZXN1bHRzIHx8IGNvdW50ID09IDApIHtcbiAgICAgICAgICByZXR1cm4gcHVzaFN0YXR1cy5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1heFBhZ2VzID0gTWF0aC5jZWlsKGNvdW50IC8gbGltaXQpO1xuICAgICAgICBwdXNoU3RhdHVzLnNldFJ1bm5pbmcobWF4UGFnZXMpO1xuICAgICAgICBsb2cuaW5mbyhcbiAgICAgICAgICBgQWxsICR7bWF4UGFnZXN9IHBhY2thZ2VzIHdlcmUgZW5xdWV1ZWQgZm9yIFB1c2hTdGF0dXMgJHtcbiAgICAgICAgICAgIHB1c2hTdGF0dXMub2JqZWN0SWRcbiAgICAgICAgICB9YFxuICAgICAgICApO1xuICAgICAgICAvLyB3aGlsZSAocGFnZSA8IG1heFBhZ2VzKSB7XG4gICAgICAgIC8vIGNoYW5nZXMgcmVxdWVzdC9saW1pdC9vcmRlckJ5IGJ5IGlkIHJhbmdlIGludGVydmFscyBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlXG4gICAgICAgIC8vIGh0dHBzOi8vZG9jcy5tb25nb2RiLmNvbS9tYW51YWwvcmVmZXJlbmNlL21ldGhvZC9jdXJzb3Iuc2tpcC9cbiAgICAgICAgLy8gUmFuZ2UgcXVlcmllcyBjYW4gdXNlIGluZGV4ZXMgdG8gYXZvaWQgc2Nhbm5pbmcgdW53YW50ZWQgZG9jdW1lbnRzLFxuICAgICAgICAvLyB0eXBpY2FsbHkgeWllbGRpbmcgYmV0dGVyIHBlcmZvcm1hbmNlIGFzIHRoZSBvZmZzZXQgZ3Jvd3MgY29tcGFyZWRcbiAgICAgICAgLy8gdG8gdXNpbmcgY3Vyc29yLnNraXAoKSBmb3IgcGFnaW5hdGlvbi5cbiAgICAgICAgY29uc3QgcXVlcnkgPSB7IHdoZXJlIH07XG5cbiAgICAgICAgY29uc3QgcHVzaFdvcmtJdGVtID0ge1xuICAgICAgICAgIGJvZHksXG4gICAgICAgICAgcXVlcnksXG4gICAgICAgICAgbWF4UGFnZXMsXG4gICAgICAgICAgcHVzaFN0YXR1czogeyBvYmplY3RJZDogcHVzaFN0YXR1cy5vYmplY3RJZCB9LFxuICAgICAgICAgIGFwcGxpY2F0aW9uSWQ6IGNvbmZpZy5hcHBsaWNhdGlvbklkLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwdWJsaXNoUmVzdWx0ID0gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICAgIHRoaXMucGFyc2VQdWJsaXNoZXIucHVibGlzaChcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbCxcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHB1c2hXb3JrSXRlbSlcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBwdWJsaXNoUmVzdWx0LnRoZW4ocmVwb25zZSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVwb25zZSAmJiByZXBvbnNlLmRhdGEgfHwgcmVwb25zZTtcbiAgICAgICAgICBsb2cuaW5mbyhcbiAgICAgICAgICAgIGBBbGwgJHttYXhQYWdlc30gcGFja2FnZXMgd2VyZSBlbnF1ZXVlZCBmb3IgUHVzaFN0YXR1cyAke1xuICAgICAgICAgICAgICBwdXNoU3RhdHVzLm9iamVjdElkXG4gICAgICAgICAgICB9YCxcbiAgICAgICAgICAgIHJlc3VsdFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIGxvZy5pbmZvKFxuICAgICAgICAgIGBDYW4ndCBjb3VudCBpbnN0YWxsYXRpb25zIGZvciBQdXNoU3RhdHVzICR7cHVzaFN0YXR1cy5vYmplY3RJZH06ICR7XG4gICAgICAgICAgICBlcnIubWVzc2FnZVxuICAgICAgICAgIH1gXG4gICAgICAgICk7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH0pO1xuICB9XG59XG4iXX0=