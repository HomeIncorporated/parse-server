'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExportRouter = undefined;

var _PromiseRouter = require('../PromiseRouter');

var _PromiseRouter2 = _interopRequireDefault(_PromiseRouter);

var _AdapterLoader = require('../Adapters/AdapterLoader');

var _rest = require('../rest');

var _rest2 = _interopRequireDefault(_rest);

var _archiver = require('archiver');

var _archiver2 = _interopRequireDefault(_archiver);

var _tmp = require('tmp');

var _tmp2 = _interopRequireDefault(_tmp);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DefaultExportExportProgressCollectionName = "_ExportProgress";
const relationSchema = { fields: { relatedId: { type: 'String' }, owningId: { type: 'String' } } };

class ExportRouter extends _PromiseRouter2.default {

  exportClassPage(req, name, jsonFileStream, where, skip, limit) {

    const databaseController = req.config.database;

    const options = {
      skip,
      limit
    };

    const findPromise = name.indexOf('_Join') === 0 ? databaseController.adapter.find(name, relationSchema, where, options) : _rest2.default.find(req.config, req.auth, name, where, options);

    return findPromise.then(data => {
      if (Array.isArray(data)) {
        data = { results: data };
      }

      if (skip && data.results.length) {
        jsonFileStream.write(',\n');
      }

      jsonFileStream.write(JSON.stringify(data.results, null, 2).substr(1).slice(0, -1));
    });
  }

  exportClass(req, data) {

    const databaseController = req.config.database;
    const tmpJsonFile = _tmp2.default.fileSync();
    const jsonFileStream = _fs2.default.createWriteStream(tmpJsonFile.name);

    jsonFileStream.write('{\n"results" : [\n');

    const findPromise = data.name.indexOf('_Join') === 0 ? databaseController.adapter.count(data.name, relationSchema, data.where) : _rest2.default.find(req.config, req.auth, data.name, data.where, { count: true, limit: 0 });

    return findPromise.then(result => {

      if (Number.isInteger(result)) {
        result = { count: result };
      }

      let i = 0;
      const pageLimit = 1000;
      let promise = Promise.resolve();

      for (i = 0; i < result.count; i += pageLimit) {

        const skip = i;
        promise = promise.then(() => {
          return this.exportClassPage(req, data.name, jsonFileStream, data.where, skip, pageLimit);
        });
      }

      return promise;
    }).then(() => {

      jsonFileStream.end(']\n}');

      return new Promise(resolve => {

        jsonFileStream.on('close', () => {
          tmpJsonFile._name = `${data.name.replace(/:/g, 'êž‰')}.json`;

          resolve(tmpJsonFile);
        });
      });
    });
  }

  handleExportProgress(req) {

    const databaseController = req.config.database;

    const query = {
      masterKey: req.info.masterKey,
      applicationId: req.info.appId
    };

    return databaseController.find(DefaultExportExportProgressCollectionName, query).then(response => {
      return { response };
    });
  }

  handleExport(req) {

    const databaseController = req.config.database;

    const emailControllerAdapter = (0, _AdapterLoader.loadAdapter)(req.config.emailAdapter);

    if (!emailControllerAdapter) {
      return Promise.reject(new Error('You have to setup a Mail Adapter.'));
    }

    const exportProgress = {
      id: req.body.name,
      masterKey: req.info.masterKey,
      applicationId: req.info.appId
    };

    databaseController.create(DefaultExportExportProgressCollectionName, exportProgress).then(() => {
      return databaseController.loadSchema({ clearCache: true });
    }).then(schemaController => schemaController.getOneSchema(req.body.name, true)).then(schema => {
      const classNames = [req.body.name];
      Object.keys(schema.fields).forEach(fieldName => {
        const field = schema.fields[fieldName];

        if (field.type === 'Relation') {
          classNames.push(`_Join:${fieldName}:${req.body.name}`);
        }
      });

      const promisses = classNames.map(name => {
        return this.exportClass(req, { name });
      });

      return Promise.all(promisses);
    }).then(jsonFiles => {

      return new Promise(resolve => {
        const tmpZipFile = _tmp2.default.fileSync();
        const tmpZipStream = _fs2.default.createWriteStream(tmpZipFile.name);

        const zip = (0, _archiver2.default)('zip');
        zip.pipe(tmpZipStream);

        jsonFiles.forEach(tmpJsonFile => {
          zip.append(_fs2.default.readFileSync(tmpJsonFile.name), { name: tmpJsonFile._name });
          tmpJsonFile.removeCallback();
        });

        zip.finalize();

        tmpZipStream.on('close', () => {

          const buf = _fs2.default.readFileSync(tmpZipFile.name);
          tmpZipFile.removeCallback();
          resolve(buf);
        });
      });
    }).then(zippedFile => {
      const filesController = req.config.filesController;
      return filesController.createFile(req.config, req.body.name, zippedFile, 'application/zip');
    }).then(fileData => {

      return emailControllerAdapter.sendMail({
        text: `We have successfully exported your data from the class ${req.body.name}.\n
        Please download from ${fileData.url}`,
        link: fileData.url,
        to: req.body.feedbackEmail,
        subject: 'Export completed'
      });
    }).catch(error => {
      return emailControllerAdapter.sendMail({
        text: `We could not export your data to the class ${req.body.name}. Error: ${error}`,
        to: req.body.feedbackEmail,
        subject: 'Export failed'
      });
    }).then(() => {
      return databaseController.destroy(DefaultExportExportProgressCollectionName, exportProgress);
    });

    return Promise.resolve({ response: 'We are exporting your data. You will be notified by e-mail once it is completed.' });
  }

  mountRoutes() {
    this.route('PUT', '/export_data', req => {
      return this.handleExport(req);
    });

    this.route('GET', '/export_progress', req => {
      return this.handleExportProgress(req);
    });
  }
}

exports.ExportRouter = ExportRouter;
exports.default = ExportRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Sb3V0ZXJzL0V4cG9ydFJvdXRlci5qcyJdLCJuYW1lcyI6WyJEZWZhdWx0RXhwb3J0RXhwb3J0UHJvZ3Jlc3NDb2xsZWN0aW9uTmFtZSIsInJlbGF0aW9uU2NoZW1hIiwiZmllbGRzIiwicmVsYXRlZElkIiwidHlwZSIsIm93bmluZ0lkIiwiRXhwb3J0Um91dGVyIiwiUHJvbWlzZVJvdXRlciIsImV4cG9ydENsYXNzUGFnZSIsInJlcSIsIm5hbWUiLCJqc29uRmlsZVN0cmVhbSIsIndoZXJlIiwic2tpcCIsImxpbWl0IiwiZGF0YWJhc2VDb250cm9sbGVyIiwiY29uZmlnIiwiZGF0YWJhc2UiLCJvcHRpb25zIiwiZmluZFByb21pc2UiLCJpbmRleE9mIiwiYWRhcHRlciIsImZpbmQiLCJyZXN0IiwiYXV0aCIsInRoZW4iLCJkYXRhIiwiQXJyYXkiLCJpc0FycmF5IiwicmVzdWx0cyIsImxlbmd0aCIsIndyaXRlIiwiSlNPTiIsInN0cmluZ2lmeSIsInN1YnN0ciIsInNsaWNlIiwiZXhwb3J0Q2xhc3MiLCJ0bXBKc29uRmlsZSIsInRtcCIsImZpbGVTeW5jIiwiZnMiLCJjcmVhdGVXcml0ZVN0cmVhbSIsImNvdW50IiwicmVzdWx0IiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiaSIsInBhZ2VMaW1pdCIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsImVuZCIsIm9uIiwiX25hbWUiLCJyZXBsYWNlIiwiaGFuZGxlRXhwb3J0UHJvZ3Jlc3MiLCJxdWVyeSIsIm1hc3RlcktleSIsImluZm8iLCJhcHBsaWNhdGlvbklkIiwiYXBwSWQiLCJyZXNwb25zZSIsImhhbmRsZUV4cG9ydCIsImVtYWlsQ29udHJvbGxlckFkYXB0ZXIiLCJlbWFpbEFkYXB0ZXIiLCJyZWplY3QiLCJFcnJvciIsImV4cG9ydFByb2dyZXNzIiwiaWQiLCJib2R5IiwiY3JlYXRlIiwibG9hZFNjaGVtYSIsImNsZWFyQ2FjaGUiLCJzY2hlbWFDb250cm9sbGVyIiwiZ2V0T25lU2NoZW1hIiwic2NoZW1hIiwiY2xhc3NOYW1lcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiZmllbGROYW1lIiwiZmllbGQiLCJwdXNoIiwicHJvbWlzc2VzIiwibWFwIiwiYWxsIiwianNvbkZpbGVzIiwidG1wWmlwRmlsZSIsInRtcFppcFN0cmVhbSIsInppcCIsInBpcGUiLCJhcHBlbmQiLCJyZWFkRmlsZVN5bmMiLCJyZW1vdmVDYWxsYmFjayIsImZpbmFsaXplIiwiYnVmIiwiemlwcGVkRmlsZSIsImZpbGVzQ29udHJvbGxlciIsImNyZWF0ZUZpbGUiLCJmaWxlRGF0YSIsInNlbmRNYWlsIiwidGV4dCIsInVybCIsImxpbmsiLCJ0byIsImZlZWRiYWNrRW1haWwiLCJzdWJqZWN0IiwiY2F0Y2giLCJlcnJvciIsImRlc3Ryb3kiLCJtb3VudFJvdXRlcyIsInJvdXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsTUFBTUEsNENBQTRDLGlCQUFsRDtBQUNBLE1BQU1DLGlCQUFpQixFQUFFQyxRQUFRLEVBQUVDLFdBQVcsRUFBRUMsTUFBTSxRQUFSLEVBQWIsRUFBaUNDLFVBQVUsRUFBRUQsTUFBTSxRQUFSLEVBQTNDLEVBQVYsRUFBdkI7O0FBRU8sTUFBTUUsWUFBTixTQUEyQkMsdUJBQTNCLENBQXlDOztBQUU5Q0Msa0JBQWdCQyxHQUFoQixFQUFxQkMsSUFBckIsRUFBMkJDLGNBQTNCLEVBQTJDQyxLQUEzQyxFQUFrREMsSUFBbEQsRUFBd0RDLEtBQXhELEVBQStEOztBQUU3RCxVQUFNQyxxQkFBcUJOLElBQUlPLE1BQUosQ0FBV0MsUUFBdEM7O0FBRUEsVUFBTUMsVUFBVztBQUNmTCxVQURlO0FBRWZDO0FBRmUsS0FBakI7O0FBS0EsVUFBTUssY0FBY1QsS0FBS1UsT0FBTCxDQUFhLE9BQWIsTUFBMEIsQ0FBMUIsR0FDbEJMLG1CQUFtQk0sT0FBbkIsQ0FBMkJDLElBQTNCLENBQWdDWixJQUFoQyxFQUFzQ1QsY0FBdEMsRUFBc0RXLEtBQXRELEVBQTZETSxPQUE3RCxDQURrQixHQUVoQkssZUFBS0QsSUFBTCxDQUFVYixJQUFJTyxNQUFkLEVBQXNCUCxJQUFJZSxJQUExQixFQUFnQ2QsSUFBaEMsRUFBdUNFLEtBQXZDLEVBQThDTSxPQUE5QyxDQUZKOztBQUlBLFdBQU9DLFlBQ0pNLElBREksQ0FDRUMsSUFBRCxJQUFVO0FBQ2QsVUFBSUMsTUFBTUMsT0FBTixDQUFjRixJQUFkLENBQUosRUFBeUI7QUFDdkJBLGVBQU8sRUFBRUcsU0FBVUgsSUFBWixFQUFQO0FBQ0Q7O0FBRUQsVUFBSWIsUUFBUWEsS0FBS0csT0FBTCxDQUFhQyxNQUF6QixFQUFpQztBQUMvQm5CLHVCQUFlb0IsS0FBZixDQUFxQixLQUFyQjtBQUNEOztBQUVEcEIscUJBQWVvQixLQUFmLENBQXFCQyxLQUFLQyxTQUFMLENBQWVQLEtBQUtHLE9BQXBCLEVBQTZCLElBQTdCLEVBQW1DLENBQW5DLEVBQXNDSyxNQUF0QyxDQUE2QyxDQUE3QyxFQUFnREMsS0FBaEQsQ0FBc0QsQ0FBdEQsRUFBd0QsQ0FBQyxDQUF6RCxDQUFyQjtBQUNELEtBWEksQ0FBUDtBQVlEOztBQUVEQyxjQUFZM0IsR0FBWixFQUFpQmlCLElBQWpCLEVBQXVCOztBQUdyQixVQUFNWCxxQkFBcUJOLElBQUlPLE1BQUosQ0FBV0MsUUFBdEM7QUFDQSxVQUFNb0IsY0FBY0MsY0FBSUMsUUFBSixFQUFwQjtBQUNBLFVBQU01QixpQkFBaUI2QixhQUFHQyxpQkFBSCxDQUFxQkosWUFBWTNCLElBQWpDLENBQXZCOztBQUVBQyxtQkFBZW9CLEtBQWYsQ0FBcUIsb0JBQXJCOztBQUVBLFVBQU1aLGNBQWNPLEtBQUtoQixJQUFMLENBQVVVLE9BQVYsQ0FBa0IsT0FBbEIsTUFBK0IsQ0FBL0IsR0FDbEJMLG1CQUFtQk0sT0FBbkIsQ0FBMkJxQixLQUEzQixDQUFpQ2hCLEtBQUtoQixJQUF0QyxFQUE0Q1QsY0FBNUMsRUFBNER5QixLQUFLZCxLQUFqRSxDQURrQixHQUVoQlcsZUFBS0QsSUFBTCxDQUFVYixJQUFJTyxNQUFkLEVBQXNCUCxJQUFJZSxJQUExQixFQUFnQ0UsS0FBS2hCLElBQXJDLEVBQTRDZ0IsS0FBS2QsS0FBakQsRUFBd0QsRUFBRThCLE9BQU8sSUFBVCxFQUFlNUIsT0FBTyxDQUF0QixFQUF4RCxDQUZKOztBQUlBLFdBQU9LLFlBQ0pNLElBREksQ0FDRWtCLE1BQUQsSUFBWTs7QUFFaEIsVUFBSUMsT0FBT0MsU0FBUCxDQUFpQkYsTUFBakIsQ0FBSixFQUE4QjtBQUM1QkEsaUJBQVMsRUFBRUQsT0FBT0MsTUFBVCxFQUFUO0FBQ0Q7O0FBRUQsVUFBSUcsSUFBSSxDQUFSO0FBQ0EsWUFBTUMsWUFBWSxJQUFsQjtBQUNBLFVBQUlDLFVBQVVDLFFBQVFDLE9BQVIsRUFBZDs7QUFHQSxXQUFLSixJQUFJLENBQVQsRUFBWUEsSUFBSUgsT0FBT0QsS0FBdkIsRUFBOEJJLEtBQUtDLFNBQW5DLEVBQThDOztBQUU1QyxjQUFNbEMsT0FBT2lDLENBQWI7QUFDQUUsa0JBQVVBLFFBQVF2QixJQUFSLENBQWEsTUFBTTtBQUMzQixpQkFBTyxLQUFLakIsZUFBTCxDQUFxQkMsR0FBckIsRUFBMEJpQixLQUFLaEIsSUFBL0IsRUFBcUNDLGNBQXJDLEVBQXFEZSxLQUFLZCxLQUExRCxFQUFpRUMsSUFBakUsRUFBdUVrQyxTQUF2RSxDQUFQO0FBQ0QsU0FGUyxDQUFWO0FBR0Q7O0FBRUQsYUFBT0MsT0FBUDtBQUNELEtBckJJLEVBc0JKdkIsSUF0QkksQ0FzQkMsTUFBTTs7QUFFVmQscUJBQWV3QyxHQUFmLENBQW1CLE1BQW5COztBQUVBLGFBQU8sSUFBSUYsT0FBSixDQUFhQyxPQUFELElBQWE7O0FBRTlCdkMsdUJBQWV5QyxFQUFmLENBQWtCLE9BQWxCLEVBQTJCLE1BQU07QUFDL0JmLHNCQUFZZ0IsS0FBWixHQUFxQixHQUFFM0IsS0FBS2hCLElBQUwsQ0FBVTRDLE9BQVYsQ0FBa0IsSUFBbEIsRUFBdUIsR0FBdkIsQ0FBNEIsT0FBbkQ7O0FBRUFKLGtCQUFRYixXQUFSO0FBQ0QsU0FKRDtBQUtELE9BUE0sQ0FBUDtBQVFELEtBbENJLENBQVA7QUFtQ0Q7O0FBRURrQix1QkFBcUI5QyxHQUFyQixFQUEwQjs7QUFFeEIsVUFBTU0scUJBQXFCTixJQUFJTyxNQUFKLENBQVdDLFFBQXRDOztBQUVBLFVBQU11QyxRQUFRO0FBQ1pDLGlCQUFXaEQsSUFBSWlELElBQUosQ0FBU0QsU0FEUjtBQUVaRSxxQkFBZWxELElBQUlpRCxJQUFKLENBQVNFO0FBRlosS0FBZDs7QUFLQSxXQUFPN0MsbUJBQW1CTyxJQUFuQixDQUF3QnRCLHlDQUF4QixFQUFtRXdELEtBQW5FLEVBQ0ovQixJQURJLENBQ0VvQyxRQUFELElBQWM7QUFDbEIsYUFBTyxFQUFFQSxRQUFGLEVBQVA7QUFDRCxLQUhJLENBQVA7QUFJRDs7QUFFREMsZUFBYXJELEdBQWIsRUFBa0I7O0FBRWhCLFVBQU1NLHFCQUFxQk4sSUFBSU8sTUFBSixDQUFXQyxRQUF0Qzs7QUFFQSxVQUFNOEMseUJBQXlCLGdDQUFZdEQsSUFBSU8sTUFBSixDQUFXZ0QsWUFBdkIsQ0FBL0I7O0FBRUEsUUFBSSxDQUFDRCxzQkFBTCxFQUE2QjtBQUMzQixhQUFPZCxRQUFRZ0IsTUFBUixDQUFlLElBQUlDLEtBQUosQ0FBVSxtQ0FBVixDQUFmLENBQVA7QUFDRDs7QUFFRCxVQUFNQyxpQkFBaUI7QUFDckJDLFVBQUkzRCxJQUFJNEQsSUFBSixDQUFTM0QsSUFEUTtBQUVyQitDLGlCQUFXaEQsSUFBSWlELElBQUosQ0FBU0QsU0FGQztBQUdyQkUscUJBQWVsRCxJQUFJaUQsSUFBSixDQUFTRTtBQUhILEtBQXZCOztBQU1BN0MsdUJBQW1CdUQsTUFBbkIsQ0FBMEJ0RSx5Q0FBMUIsRUFBcUVtRSxjQUFyRSxFQUNHMUMsSUFESCxDQUNRLE1BQU07QUFDVixhQUFPVixtQkFBbUJ3RCxVQUFuQixDQUE4QixFQUFFQyxZQUFZLElBQWQsRUFBOUIsQ0FBUDtBQUNELEtBSEgsRUFJRy9DLElBSkgsQ0FJUWdELG9CQUFvQkEsaUJBQWlCQyxZQUFqQixDQUE4QmpFLElBQUk0RCxJQUFKLENBQVMzRCxJQUF2QyxFQUE2QyxJQUE3QyxDQUo1QixFQUtHZSxJQUxILENBS1NrRCxNQUFELElBQVk7QUFDaEIsWUFBTUMsYUFBYSxDQUFFbkUsSUFBSTRELElBQUosQ0FBUzNELElBQVgsQ0FBbkI7QUFDQW1FLGFBQU9DLElBQVAsQ0FBWUgsT0FBT3pFLE1BQW5CLEVBQTJCNkUsT0FBM0IsQ0FBb0NDLFNBQUQsSUFBZTtBQUNoRCxjQUFNQyxRQUFRTixPQUFPekUsTUFBUCxDQUFjOEUsU0FBZCxDQUFkOztBQUVBLFlBQUlDLE1BQU03RSxJQUFOLEtBQWUsVUFBbkIsRUFBK0I7QUFDN0J3RSxxQkFBV00sSUFBWCxDQUFpQixTQUFRRixTQUFVLElBQUd2RSxJQUFJNEQsSUFBSixDQUFTM0QsSUFBSyxFQUFwRDtBQUNEO0FBQ0YsT0FORDs7QUFRQSxZQUFNeUUsWUFBWVAsV0FBV1EsR0FBWCxDQUFnQjFFLElBQUQsSUFBVTtBQUN6QyxlQUFPLEtBQUswQixXQUFMLENBQWlCM0IsR0FBakIsRUFBc0IsRUFBRUMsSUFBRixFQUF0QixDQUFQO0FBQ0QsT0FGaUIsQ0FBbEI7O0FBSUEsYUFBT3VDLFFBQVFvQyxHQUFSLENBQVlGLFNBQVosQ0FBUDtBQUNELEtBcEJILEVBcUJHMUQsSUFyQkgsQ0FxQlM2RCxTQUFELElBQWU7O0FBRW5CLGFBQU8sSUFBSXJDLE9BQUosQ0FBYUMsT0FBRCxJQUFhO0FBQzlCLGNBQU1xQyxhQUFhakQsY0FBSUMsUUFBSixFQUFuQjtBQUNBLGNBQU1pRCxlQUFlaEQsYUFBR0MsaUJBQUgsQ0FBcUI4QyxXQUFXN0UsSUFBaEMsQ0FBckI7O0FBRUEsY0FBTStFLE1BQU8sd0JBQVMsS0FBVCxDQUFiO0FBQ0FBLFlBQUlDLElBQUosQ0FBU0YsWUFBVDs7QUFFQUYsa0JBQVVQLE9BQVYsQ0FBa0IxQyxlQUFlO0FBQy9Cb0QsY0FBSUUsTUFBSixDQUFXbkQsYUFBR29ELFlBQUgsQ0FBZ0J2RCxZQUFZM0IsSUFBNUIsQ0FBWCxFQUE4QyxFQUFFQSxNQUFPMkIsWUFBWWdCLEtBQXJCLEVBQTlDO0FBQ0FoQixzQkFBWXdELGNBQVo7QUFDRCxTQUhEOztBQUtBSixZQUFJSyxRQUFKOztBQUVBTixxQkFBYXBDLEVBQWIsQ0FBZ0IsT0FBaEIsRUFBeUIsTUFBTTs7QUFFN0IsZ0JBQU0yQyxNQUFNdkQsYUFBR29ELFlBQUgsQ0FBZ0JMLFdBQVc3RSxJQUEzQixDQUFaO0FBQ0E2RSxxQkFBV00sY0FBWDtBQUNBM0Msa0JBQVE2QyxHQUFSO0FBRUQsU0FORDtBQU9ELE9BckJNLENBQVA7QUF1QkQsS0E5Q0gsRUErQ0d0RSxJQS9DSCxDQStDU3VFLFVBQUQsSUFBZ0I7QUFDcEIsWUFBTUMsa0JBQWtCeEYsSUFBSU8sTUFBSixDQUFXaUYsZUFBbkM7QUFDQSxhQUFPQSxnQkFBZ0JDLFVBQWhCLENBQTJCekYsSUFBSU8sTUFBL0IsRUFBdUNQLElBQUk0RCxJQUFKLENBQVMzRCxJQUFoRCxFQUFzRHNGLFVBQXRELEVBQWtFLGlCQUFsRSxDQUFQO0FBQ0QsS0FsREgsRUFtREd2RSxJQW5ESCxDQW1EUzBFLFFBQUQsSUFBYzs7QUFFbEIsYUFBT3BDLHVCQUF1QnFDLFFBQXZCLENBQWdDO0FBQ3JDQyxjQUFPLDBEQUF5RDVGLElBQUk0RCxJQUFKLENBQVMzRCxJQUFLOytCQUN6RHlGLFNBQVNHLEdBQUksRUFGRztBQUdyQ0MsY0FBTUosU0FBU0csR0FIc0I7QUFJckNFLFlBQUkvRixJQUFJNEQsSUFBSixDQUFTb0MsYUFKd0I7QUFLckNDLGlCQUFTO0FBTDRCLE9BQWhDLENBQVA7QUFPRCxLQTVESCxFQTZER0MsS0E3REgsQ0E2RFVDLEtBQUQsSUFBVztBQUNoQixhQUFPN0MsdUJBQXVCcUMsUUFBdkIsQ0FBZ0M7QUFDckNDLGNBQU8sOENBQTZDNUYsSUFBSTRELElBQUosQ0FBUzNELElBQUssWUFBV2tHLEtBQU0sRUFEOUM7QUFFckNKLFlBQUkvRixJQUFJNEQsSUFBSixDQUFTb0MsYUFGd0I7QUFHckNDLGlCQUFTO0FBSDRCLE9BQWhDLENBQVA7QUFLRCxLQW5FSCxFQW9FR2pGLElBcEVILENBb0VRLE1BQU07QUFDVixhQUFPVixtQkFBbUI4RixPQUFuQixDQUEyQjdHLHlDQUEzQixFQUFzRW1FLGNBQXRFLENBQVA7QUFDRCxLQXRFSDs7QUF3RUEsV0FBT2xCLFFBQVFDLE9BQVIsQ0FBZ0IsRUFBQ1csVUFBVSxrRkFBWCxFQUFoQixDQUFQO0FBQ0Q7O0FBRURpRCxnQkFBYztBQUNaLFNBQUtDLEtBQUwsQ0FDRSxLQURGLEVBRUUsY0FGRixFQUdHdEcsR0FBRCxJQUFTO0FBQUUsYUFBTyxLQUFLcUQsWUFBTCxDQUFrQnJELEdBQWxCLENBQVA7QUFBZ0MsS0FIN0M7O0FBTUEsU0FBS3NHLEtBQUwsQ0FDRSxLQURGLEVBRUUsa0JBRkYsRUFHR3RHLEdBQUQsSUFBUztBQUFFLGFBQU8sS0FBSzhDLG9CQUFMLENBQTBCOUMsR0FBMUIsQ0FBUDtBQUF3QyxLQUhyRDtBQU1EO0FBdE02Qzs7UUFBbkNILFksR0FBQUEsWTtrQkF5TUVBLFkiLCJmaWxlIjoiRXhwb3J0Um91dGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb21pc2VSb3V0ZXIgICBmcm9tICcuLi9Qcm9taXNlUm91dGVyJztcbmltcG9ydCB7IGxvYWRBZGFwdGVyIH0gZnJvbSAnLi4vQWRhcHRlcnMvQWRhcHRlckxvYWRlcic7XG5pbXBvcnQgcmVzdCAgICAgICAgICAgIGZyb20gJy4uL3Jlc3QnO1xuaW1wb3J0IGFyY2hpdmVyICAgICAgICBmcm9tICdhcmNoaXZlcic7XG5pbXBvcnQgdG1wICAgICAgICAgICAgIGZyb20gJ3RtcCc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuXG5jb25zdCBEZWZhdWx0RXhwb3J0RXhwb3J0UHJvZ3Jlc3NDb2xsZWN0aW9uTmFtZSA9IFwiX0V4cG9ydFByb2dyZXNzXCI7XG5jb25zdCByZWxhdGlvblNjaGVtYSA9IHsgZmllbGRzOiB7IHJlbGF0ZWRJZDogeyB0eXBlOiAnU3RyaW5nJyB9LCBvd25pbmdJZDogeyB0eXBlOiAnU3RyaW5nJyB9IH0gfTtcblxuZXhwb3J0IGNsYXNzIEV4cG9ydFJvdXRlciBleHRlbmRzIFByb21pc2VSb3V0ZXIge1xuXG4gIGV4cG9ydENsYXNzUGFnZShyZXEsIG5hbWUsIGpzb25GaWxlU3RyZWFtLCB3aGVyZSwgc2tpcCwgbGltaXQpIHtcblxuICAgIGNvbnN0IGRhdGFiYXNlQ29udHJvbGxlciA9IHJlcS5jb25maWcuZGF0YWJhc2U7XG5cbiAgICBjb25zdCBvcHRpb25zID0gIHtcbiAgICAgIHNraXAsXG4gICAgICBsaW1pdFxuICAgIH07XG5cbiAgICBjb25zdCBmaW5kUHJvbWlzZSA9IG5hbWUuaW5kZXhPZignX0pvaW4nKSA9PT0gMCA/XG4gICAgICBkYXRhYmFzZUNvbnRyb2xsZXIuYWRhcHRlci5maW5kKG5hbWUsIHJlbGF0aW9uU2NoZW1hLCB3aGVyZSwgb3B0aW9ucylcbiAgICAgIDogcmVzdC5maW5kKHJlcS5jb25maWcsIHJlcS5hdXRoLCBuYW1lLCAgd2hlcmUsIG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIGZpbmRQcm9taXNlXG4gICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgIGRhdGEgPSB7IHJlc3VsdHMgOiBkYXRhIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2tpcCAmJiBkYXRhLnJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgICAganNvbkZpbGVTdHJlYW0ud3JpdGUoJyxcXG4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGpzb25GaWxlU3RyZWFtLndyaXRlKEpTT04uc3RyaW5naWZ5KGRhdGEucmVzdWx0cywgbnVsbCwgMikuc3Vic3RyKDEpLnNsaWNlKDAsLTEpKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0Q2xhc3MocmVxLCBkYXRhKSB7XG5cblxuICAgIGNvbnN0IGRhdGFiYXNlQ29udHJvbGxlciA9IHJlcS5jb25maWcuZGF0YWJhc2U7XG4gICAgY29uc3QgdG1wSnNvbkZpbGUgPSB0bXAuZmlsZVN5bmMoKTtcbiAgICBjb25zdCBqc29uRmlsZVN0cmVhbSA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKHRtcEpzb25GaWxlLm5hbWUpO1xuXG4gICAganNvbkZpbGVTdHJlYW0ud3JpdGUoJ3tcXG5cInJlc3VsdHNcIiA6IFtcXG4nKTtcblxuICAgIGNvbnN0IGZpbmRQcm9taXNlID0gZGF0YS5uYW1lLmluZGV4T2YoJ19Kb2luJykgPT09IDAgP1xuICAgICAgZGF0YWJhc2VDb250cm9sbGVyLmFkYXB0ZXIuY291bnQoZGF0YS5uYW1lLCByZWxhdGlvblNjaGVtYSwgZGF0YS53aGVyZSlcbiAgICAgIDogcmVzdC5maW5kKHJlcS5jb25maWcsIHJlcS5hdXRoLCBkYXRhLm5hbWUsICBkYXRhLndoZXJlLCB7IGNvdW50OiB0cnVlLCBsaW1pdDogMCB9KTtcblxuICAgIHJldHVybiBmaW5kUHJvbWlzZVxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuXG4gICAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHJlc3VsdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSB7IGNvdW50OiByZXN1bHQgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgY29uc3QgcGFnZUxpbWl0ID0gMTAwMDtcbiAgICAgICAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcblxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCByZXN1bHQuY291bnQ7IGkgKz0gcGFnZUxpbWl0KSB7XG5cbiAgICAgICAgICBjb25zdCBza2lwID0gaTtcbiAgICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV4cG9ydENsYXNzUGFnZShyZXEsIGRhdGEubmFtZSwganNvbkZpbGVTdHJlYW0sIGRhdGEud2hlcmUsIHNraXAsIHBhZ2VMaW1pdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG5cbiAgICAgICAganNvbkZpbGVTdHJlYW0uZW5kKCddXFxufScpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuXG4gICAgICAgICAganNvbkZpbGVTdHJlYW0ub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICAgICAgdG1wSnNvbkZpbGUuX25hbWUgPSBgJHtkYXRhLm5hbWUucmVwbGFjZSgvOi9nLCfqnoknKX0uanNvbmA7XG5cbiAgICAgICAgICAgIHJlc29sdmUodG1wSnNvbkZpbGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgfSk7XG4gIH1cblxuICBoYW5kbGVFeHBvcnRQcm9ncmVzcyhyZXEpIHtcblxuICAgIGNvbnN0IGRhdGFiYXNlQ29udHJvbGxlciA9IHJlcS5jb25maWcuZGF0YWJhc2U7XG5cbiAgICBjb25zdCBxdWVyeSA9IHtcbiAgICAgIG1hc3RlcktleTogcmVxLmluZm8ubWFzdGVyS2V5LFxuICAgICAgYXBwbGljYXRpb25JZDogcmVxLmluZm8uYXBwSWRcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRhdGFiYXNlQ29udHJvbGxlci5maW5kKERlZmF1bHRFeHBvcnRFeHBvcnRQcm9ncmVzc0NvbGxlY3Rpb25OYW1lLCBxdWVyeSlcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICByZXR1cm4geyByZXNwb25zZSB9O1xuICAgICAgfSk7XG4gIH1cblxuICBoYW5kbGVFeHBvcnQocmVxKSB7XG5cbiAgICBjb25zdCBkYXRhYmFzZUNvbnRyb2xsZXIgPSByZXEuY29uZmlnLmRhdGFiYXNlO1xuXG4gICAgY29uc3QgZW1haWxDb250cm9sbGVyQWRhcHRlciA9IGxvYWRBZGFwdGVyKHJlcS5jb25maWcuZW1haWxBZGFwdGVyKTtcblxuICAgIGlmICghZW1haWxDb250cm9sbGVyQWRhcHRlcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignWW91IGhhdmUgdG8gc2V0dXAgYSBNYWlsIEFkYXB0ZXIuJykpO1xuICAgIH1cblxuICAgIGNvbnN0IGV4cG9ydFByb2dyZXNzID0ge1xuICAgICAgaWQ6IHJlcS5ib2R5Lm5hbWUsXG4gICAgICBtYXN0ZXJLZXk6IHJlcS5pbmZvLm1hc3RlcktleSxcbiAgICAgIGFwcGxpY2F0aW9uSWQ6IHJlcS5pbmZvLmFwcElkXG4gICAgfTtcblxuICAgIGRhdGFiYXNlQ29udHJvbGxlci5jcmVhdGUoRGVmYXVsdEV4cG9ydEV4cG9ydFByb2dyZXNzQ29sbGVjdGlvbk5hbWUsIGV4cG9ydFByb2dyZXNzKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXR1cm4gZGF0YWJhc2VDb250cm9sbGVyLmxvYWRTY2hlbWEoeyBjbGVhckNhY2hlOiB0cnVlfSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oc2NoZW1hQ29udHJvbGxlciA9PiBzY2hlbWFDb250cm9sbGVyLmdldE9uZVNjaGVtYShyZXEuYm9keS5uYW1lLCB0cnVlKSlcbiAgICAgIC50aGVuKChzY2hlbWEpID0+IHtcbiAgICAgICAgY29uc3QgY2xhc3NOYW1lcyA9IFsgcmVxLmJvZHkubmFtZSBdO1xuICAgICAgICBPYmplY3Qua2V5cyhzY2hlbWEuZmllbGRzKS5mb3JFYWNoKChmaWVsZE5hbWUpID0+IHtcbiAgICAgICAgICBjb25zdCBmaWVsZCA9IHNjaGVtYS5maWVsZHNbZmllbGROYW1lXTtcblxuICAgICAgICAgIGlmIChmaWVsZC50eXBlID09PSAnUmVsYXRpb24nKSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goYF9Kb2luOiR7ZmllbGROYW1lfToke3JlcS5ib2R5Lm5hbWV9YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBwcm9taXNzZXMgPSBjbGFzc05hbWVzLm1hcCgobmFtZSkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLmV4cG9ydENsYXNzKHJlcSwgeyBuYW1lIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzc2VzKVxuICAgICAgfSlcbiAgICAgIC50aGVuKChqc29uRmlsZXMpID0+IHtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICBjb25zdCB0bXBaaXBGaWxlID0gdG1wLmZpbGVTeW5jKCk7XG4gICAgICAgICAgY29uc3QgdG1wWmlwU3RyZWFtID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0odG1wWmlwRmlsZS5uYW1lKTtcblxuICAgICAgICAgIGNvbnN0IHppcCAgPSBhcmNoaXZlcignemlwJyk7XG4gICAgICAgICAgemlwLnBpcGUodG1wWmlwU3RyZWFtKTtcblxuICAgICAgICAgIGpzb25GaWxlcy5mb3JFYWNoKHRtcEpzb25GaWxlID0+IHtcbiAgICAgICAgICAgIHppcC5hcHBlbmQoZnMucmVhZEZpbGVTeW5jKHRtcEpzb25GaWxlLm5hbWUpLCB7IG5hbWU6ICB0bXBKc29uRmlsZS5fbmFtZSB9KTtcbiAgICAgICAgICAgIHRtcEpzb25GaWxlLnJlbW92ZUNhbGxiYWNrKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB6aXAuZmluYWxpemUoKTtcblxuICAgICAgICAgIHRtcFppcFN0cmVhbS5vbignY2xvc2UnLCAoKSA9PiB7XG5cbiAgICAgICAgICAgIGNvbnN0IGJ1ZiA9IGZzLnJlYWRGaWxlU3luYyh0bXBaaXBGaWxlLm5hbWUpO1xuICAgICAgICAgICAgdG1wWmlwRmlsZS5yZW1vdmVDYWxsYmFjaygpO1xuICAgICAgICAgICAgcmVzb2x2ZShidWYpO1xuXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICB9KVxuICAgICAgLnRoZW4oKHppcHBlZEZpbGUpID0+IHtcbiAgICAgICAgY29uc3QgZmlsZXNDb250cm9sbGVyID0gcmVxLmNvbmZpZy5maWxlc0NvbnRyb2xsZXI7XG4gICAgICAgIHJldHVybiBmaWxlc0NvbnRyb2xsZXIuY3JlYXRlRmlsZShyZXEuY29uZmlnLCByZXEuYm9keS5uYW1lLCB6aXBwZWRGaWxlLCAnYXBwbGljYXRpb24vemlwJyk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKGZpbGVEYXRhKSA9PiB7XG5cbiAgICAgICAgcmV0dXJuIGVtYWlsQ29udHJvbGxlckFkYXB0ZXIuc2VuZE1haWwoe1xuICAgICAgICAgIHRleHQ6IGBXZSBoYXZlIHN1Y2Nlc3NmdWxseSBleHBvcnRlZCB5b3VyIGRhdGEgZnJvbSB0aGUgY2xhc3MgJHtyZXEuYm9keS5uYW1lfS5cXG5cbiAgICAgICAgUGxlYXNlIGRvd25sb2FkIGZyb20gJHtmaWxlRGF0YS51cmx9YCxcbiAgICAgICAgICBsaW5rOiBmaWxlRGF0YS51cmwsXG4gICAgICAgICAgdG86IHJlcS5ib2R5LmZlZWRiYWNrRW1haWwsXG4gICAgICAgICAgc3ViamVjdDogJ0V4cG9ydCBjb21wbGV0ZWQnXG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgcmV0dXJuIGVtYWlsQ29udHJvbGxlckFkYXB0ZXIuc2VuZE1haWwoe1xuICAgICAgICAgIHRleHQ6IGBXZSBjb3VsZCBub3QgZXhwb3J0IHlvdXIgZGF0YSB0byB0aGUgY2xhc3MgJHtyZXEuYm9keS5uYW1lfS4gRXJyb3I6ICR7ZXJyb3J9YCxcbiAgICAgICAgICB0bzogcmVxLmJvZHkuZmVlZGJhY2tFbWFpbCxcbiAgICAgICAgICBzdWJqZWN0OiAnRXhwb3J0IGZhaWxlZCdcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXR1cm4gZGF0YWJhc2VDb250cm9sbGVyLmRlc3Ryb3koRGVmYXVsdEV4cG9ydEV4cG9ydFByb2dyZXNzQ29sbGVjdGlvbk5hbWUsIGV4cG9ydFByb2dyZXNzKTtcbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7cmVzcG9uc2U6ICdXZSBhcmUgZXhwb3J0aW5nIHlvdXIgZGF0YS4gWW91IHdpbGwgYmUgbm90aWZpZWQgYnkgZS1tYWlsIG9uY2UgaXQgaXMgY29tcGxldGVkLid9KTtcbiAgfVxuXG4gIG1vdW50Um91dGVzKCkge1xuICAgIHRoaXMucm91dGUoXG4gICAgICAnUFVUJyxcbiAgICAgICcvZXhwb3J0X2RhdGEnLFxuICAgICAgKHJlcSkgPT4geyByZXR1cm4gdGhpcy5oYW5kbGVFeHBvcnQocmVxKTsgfVxuICAgICk7XG5cbiAgICB0aGlzLnJvdXRlKFxuICAgICAgJ0dFVCcsXG4gICAgICAnL2V4cG9ydF9wcm9ncmVzcycsXG4gICAgICAocmVxKSA9PiB7IHJldHVybiB0aGlzLmhhbmRsZUV4cG9ydFByb2dyZXNzKHJlcSk7IH1cbiAgICApO1xuXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRXhwb3J0Um91dGVyO1xuIl19