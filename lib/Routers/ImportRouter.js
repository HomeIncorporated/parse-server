"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ImportRouter = void 0;

var _express = _interopRequireDefault(require("express"));

var _AdapterLoader = require("../Adapters/AdapterLoader");

var middlewares = _interopRequireWildcard(require("../middlewares"));

var _multer = _interopRequireDefault(require("multer"));

var _rest = _interopRequireDefault(require("../rest"));

var _node = require("parse/node");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ImportRouter {
  getOneSchema(req) {
    const className = req.params.className;
    return req.config.database.loadSchema({
      clearCache: true
    }).then(schemaController => schemaController.getOneSchema(className)).catch(error => {
      if (error === undefined) {
        return Promise.reject(new _node.Parse.Error(_node.Parse.Error.INVALID_CLASS_NAME, `Class ${className} does not exist.`));
      } else {
        return Promise.reject(new _node.Parse.Error(_node.Parse.Error.INTERNAL_SERVER_ERROR, 'Database adapter error.'));
      }
    });
  }

  importRestObject(req, restObject, targetClass) {
    if (targetClass) {
      return _rest.default.update(req.config, req.auth, req.params.className, {
        objectId: restObject.owningId
      }, {
        [req.params.relationName]: {
          __op: 'AddRelation',
          objects: [{
            __type: 'Pointer',
            className: targetClass,
            objectId: restObject.relatedId
          }]
        }
      }, req.info.clientSDK).catch(function (error) {
        if (error.code === _node.Parse.Error.OBJECT_NOT_FOUND) {
          return Promise.reject(new _node.Parse.Error(_node.Parse.Error.OBJECT_NOT_FOUND, 'Object not found'));
        } else {
          return Promise.reject(error);
        }
      });
    }

    if (restObject.createdAt) {
      delete restObject.createdAt;
    }

    if (restObject.updatedAt) {
      delete restObject.updatedAt;
    }

    if (restObject.objectId) {
      return _rest.default.update(req.config, req.auth, req.params.className, {
        objectId: restObject.objectId
      }, restObject, req.info.clientSDK).catch(function (error) {
        if (error.code === _node.Parse.Error.OBJECT_NOT_FOUND) {
          return _rest.default.create(req.config, req.auth, req.params.className, restObject, req.info.clientSDK, {
            allowObjectId: true
          });
        } else {
          return Promise.reject(error);
        }
      });
    }

    return _rest.default.create(req.config, req.auth, req.params.className, restObject);
  }

  getRestObjects(req) {
    return new Promise(resolve => {
      let restObjects = [];
      let importFile;

      try {
        importFile = JSON.parse(req.file.buffer.toString());
      } catch (e) {
        throw new Error('Failed to parse JSON based on the file sent');
      }

      if (Array.isArray(importFile)) {
        restObjects = importFile;
      } else if (Array.isArray(importFile.results)) {
        restObjects = importFile.results;
      } else if (Array.isArray(importFile.rows)) {
        restObjects = importFile.rows;
      }

      if (!restObjects) {
        throw new Error('No data to import');
      }

      if (req.body.feedbackEmail) {
        if (!req.config.emailAdapter) {
          throw new Error('You have to setup a Mail Adapter.');
        }
      }

      resolve(restObjects);
    });
  }

  handleImport(req) {
    const emailControllerAdapter = (0, _AdapterLoader.loadAdapter)(req.config.emailAdapter);
    let promise = null;

    if (req.params.relationName) {
      promise = this.getOneSchema(req).then(response => {
        if (!response.fields.hasOwnProperty(req.params.relationName)) {
          throw new Error(`Relation ${req.params.relationName} does not exist in ${req.params.className}.`);
        } else if (response.fields[req.params.relationName].type !== 'Relation') {
          throw new Error(`Class ${response.fields[req.params.relationName].targetClass} does not have Relation type.`);
        }

        const targetClass = response.fields[req.params.relationName].targetClass;
        return Promise.all([this.getRestObjects(req), targetClass]);
      });
    } else {
      promise = Promise.all([this.getRestObjects(req)]);
    }

    promise = promise.then(([restObjects, targetClass]) => {
      return restObjects.reduce((item, object, index) => {
        item.pageArray.push(this.importRestObject.bind(this, req, object, targetClass));

        if (index && index % 100 === 0 || index === restObjects.length - 1) {
          const pageArray = item.pageArray.slice(0);
          item.pageArray = [];
          item.mainPromise = item.mainPromise.then(results => {
            return Promise.all(results.concat(pageArray.map(func => func())));
          });
        }

        return item;
      }, {
        pageArray: [],
        mainPromise: Promise.resolve([])
      }).mainPromise;
    }).then(results => {
      if (req.body.feedbackEmail) {
        emailControllerAdapter.sendMail({
          text: `We have successfully imported your data to the class ${req.params.className}${req.params.relationName ? ', relation ' + req.params.relationName : ''}.`,
          to: req.body.feedbackEmail,
          subject: 'Import completed'
        });
      } else {
        return Promise.resolve({
          response: results
        });
      }
    }).catch(error => {
      if (req.body.feedbackEmail) {
        emailControllerAdapter.sendMail({
          text: `We could not import your data to the class ${req.params.className}${req.params.relationName ? ', relation ' + req.params.relationName : ''}. Error: ${error}`,
          to: req.body.feedbackEmail,
          subject: 'Import failed'
        });
      } else {
        throw new Error('Internal server error: ' + error);
      }
    });

    if (req.body.feedbackEmail && emailControllerAdapter) {
      promise = Promise.resolve({
        response: 'We are importing your data. You will be notified by e-mail once it is completed.'
      });
    }

    return promise;
  }

  wrapPromiseRequest(req, res, handler) {
    return handler(req).then(data => {
      res.json(data);
    }).catch(err => {
      res.status(400).send({
        message: err.message
      });
    });
  }

  expressRouter() {
    const router = _express.default.Router();

    const upload = (0, _multer.default)();
    router.post('/import_data/:className', upload.single('importFile'), middlewares.allowCrossDomain, middlewares.handleParseHeaders, middlewares.enforceMasterKeyAccess, (req, res) => this.wrapPromiseRequest(req, res, this.handleImport.bind(this)));
    router.post('/import_relation_data/:className/:relationName', upload.single('importFile'), middlewares.allowCrossDomain, middlewares.handleParseHeaders, middlewares.enforceMasterKeyAccess, (req, res) => this.wrapPromiseRequest(req, res, this.handleImport.bind(this)));
    return router;
  }

}

exports.ImportRouter = ImportRouter;
var _default = ImportRouter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,