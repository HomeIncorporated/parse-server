"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParseWebSocket = exports.ParseWebSocketServer = void 0;

var _logger = _interopRequireDefault(require("../logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const typeMap = new Map([['disconnect', 'close']]);

const getWS = function () {
  return require('ws');
};

class ParseWebSocketServer {
  constructor(server, onConnect, websocketTimeout = 10 * 1000) {
    const WebSocketServer = getWS().Server;
    const wss = new WebSocketServer({
      server: server
    });
    wss.on('listening', () => {
      _logger.default.info('Parse LiveQuery Server starts running');
    });
    wss.on('connection', ws => {
      onConnect(new ParseWebSocket(ws)); // Send ping to client periodically

      const pingIntervalId = setInterval(() => {
        if (ws.readyState == ws.OPEN) {
          ws.ping();
        } else {
          clearInterval(pingIntervalId);
        }
      }, websocketTimeout);
    });
    this.server = wss;
  }

}

exports.ParseWebSocketServer = ParseWebSocketServer;

class ParseWebSocket {
  constructor(ws) {
    this.ws = ws;
  }

  on(type, callback) {
    const wsType = typeMap.has(type) ? typeMap.get(type) : type;
    this.ws.on(wsType, callback);
  }

  send(message) {
    this.ws.send(message);
  }

}

exports.ParseWebSocket = ParseWebSocket;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MaXZlUXVlcnkvUGFyc2VXZWJTb2NrZXRTZXJ2ZXIuanMiXSwibmFtZXMiOlsidHlwZU1hcCIsIk1hcCIsImdldFdTIiwicmVxdWlyZSIsIlBhcnNlV2ViU29ja2V0U2VydmVyIiwiY29uc3RydWN0b3IiLCJzZXJ2ZXIiLCJvbkNvbm5lY3QiLCJ3ZWJzb2NrZXRUaW1lb3V0IiwiV2ViU29ja2V0U2VydmVyIiwiU2VydmVyIiwid3NzIiwib24iLCJsb2dnZXIiLCJpbmZvIiwid3MiLCJQYXJzZVdlYlNvY2tldCIsInBpbmdJbnRlcnZhbElkIiwic2V0SW50ZXJ2YWwiLCJyZWFkeVN0YXRlIiwiT1BFTiIsInBpbmciLCJjbGVhckludGVydmFsIiwidHlwZSIsImNhbGxiYWNrIiwid3NUeXBlIiwiaGFzIiwiZ2V0Iiwic2VuZCIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUVBLE1BQU1BLE9BQU8sR0FBRyxJQUFJQyxHQUFKLENBQVEsQ0FBQyxDQUFDLFlBQUQsRUFBZSxPQUFmLENBQUQsQ0FBUixDQUFoQjs7QUFDQSxNQUFNQyxLQUFLLEdBQUcsWUFBVTtBQUN0QixTQUFPQyxPQUFPLENBQUMsSUFBRCxDQUFkO0FBQ0QsQ0FGRDs7QUFJTyxNQUFNQyxvQkFBTixDQUEyQjtBQUdoQ0MsRUFBQUEsV0FBVyxDQUNUQyxNQURTLEVBRVRDLFNBRlMsRUFHVEMsZ0JBQXdCLEdBQUcsS0FBSyxJQUh2QixFQUlUO0FBQ0EsVUFBTUMsZUFBZSxHQUFHUCxLQUFLLEdBQUdRLE1BQWhDO0FBQ0EsVUFBTUMsR0FBRyxHQUFHLElBQUlGLGVBQUosQ0FBb0I7QUFBRUgsTUFBQUEsTUFBTSxFQUFFQTtBQUFWLEtBQXBCLENBQVo7QUFDQUssSUFBQUEsR0FBRyxDQUFDQyxFQUFKLENBQU8sV0FBUCxFQUFvQixNQUFNO0FBQ3hCQyxzQkFBT0MsSUFBUCxDQUFZLHVDQUFaO0FBQ0QsS0FGRDtBQUdBSCxJQUFBQSxHQUFHLENBQUNDLEVBQUosQ0FBTyxZQUFQLEVBQXFCRyxFQUFFLElBQUk7QUFDekJSLE1BQUFBLFNBQVMsQ0FBQyxJQUFJUyxjQUFKLENBQW1CRCxFQUFuQixDQUFELENBQVQsQ0FEeUIsQ0FFekI7O0FBQ0EsWUFBTUUsY0FBYyxHQUFHQyxXQUFXLENBQUMsTUFBTTtBQUN2QyxZQUFJSCxFQUFFLENBQUNJLFVBQUgsSUFBaUJKLEVBQUUsQ0FBQ0ssSUFBeEIsRUFBOEI7QUFDNUJMLFVBQUFBLEVBQUUsQ0FBQ00sSUFBSDtBQUNELFNBRkQsTUFFTztBQUNMQyxVQUFBQSxhQUFhLENBQUNMLGNBQUQsQ0FBYjtBQUNEO0FBQ0YsT0FOaUMsRUFNL0JULGdCQU4rQixDQUFsQztBQU9ELEtBVkQ7QUFXQSxTQUFLRixNQUFMLEdBQWNLLEdBQWQ7QUFDRDs7QUF6QitCOzs7O0FBNEIzQixNQUFNSyxjQUFOLENBQXFCO0FBRzFCWCxFQUFBQSxXQUFXLENBQUNVLEVBQUQsRUFBVTtBQUNuQixTQUFLQSxFQUFMLEdBQVVBLEVBQVY7QUFDRDs7QUFFREgsRUFBQUEsRUFBRSxDQUFDVyxJQUFELEVBQWVDLFFBQWYsRUFBK0I7QUFDL0IsVUFBTUMsTUFBTSxHQUFHekIsT0FBTyxDQUFDMEIsR0FBUixDQUFZSCxJQUFaLElBQW9CdkIsT0FBTyxDQUFDMkIsR0FBUixDQUFZSixJQUFaLENBQXBCLEdBQXdDQSxJQUF2RDtBQUNBLFNBQUtSLEVBQUwsQ0FBUUgsRUFBUixDQUFXYSxNQUFYLEVBQW1CRCxRQUFuQjtBQUNEOztBQUVESSxFQUFBQSxJQUFJLENBQUNDLE9BQUQsRUFBcUI7QUFDdkIsU0FBS2QsRUFBTCxDQUFRYSxJQUFSLENBQWFDLE9BQWI7QUFDRDs7QUFkeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5cbmNvbnN0IHR5cGVNYXAgPSBuZXcgTWFwKFtbJ2Rpc2Nvbm5lY3QnLCAnY2xvc2UnXV0pO1xuY29uc3QgZ2V0V1MgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gcmVxdWlyZSgnd3MnKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBQYXJzZVdlYlNvY2tldFNlcnZlciB7XG4gIHNlcnZlcjogT2JqZWN0O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHNlcnZlcjogYW55LFxuICAgIG9uQ29ubmVjdDogRnVuY3Rpb24sXG4gICAgd2Vic29ja2V0VGltZW91dDogbnVtYmVyID0gMTAgKiAxMDAwXG4gICkge1xuICAgIGNvbnN0IFdlYlNvY2tldFNlcnZlciA9IGdldFdTKCkuU2VydmVyO1xuICAgIGNvbnN0IHdzcyA9IG5ldyBXZWJTb2NrZXRTZXJ2ZXIoeyBzZXJ2ZXI6IHNlcnZlciB9KTtcbiAgICB3c3Mub24oJ2xpc3RlbmluZycsICgpID0+IHtcbiAgICAgIGxvZ2dlci5pbmZvKCdQYXJzZSBMaXZlUXVlcnkgU2VydmVyIHN0YXJ0cyBydW5uaW5nJyk7XG4gICAgfSk7XG4gICAgd3NzLm9uKCdjb25uZWN0aW9uJywgd3MgPT4ge1xuICAgICAgb25Db25uZWN0KG5ldyBQYXJzZVdlYlNvY2tldCh3cykpO1xuICAgICAgLy8gU2VuZCBwaW5nIHRvIGNsaWVudCBwZXJpb2RpY2FsbHlcbiAgICAgIGNvbnN0IHBpbmdJbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBpZiAod3MucmVhZHlTdGF0ZSA9PSB3cy5PUEVOKSB7XG4gICAgICAgICAgd3MucGluZygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwocGluZ0ludGVydmFsSWQpO1xuICAgICAgICB9XG4gICAgICB9LCB3ZWJzb2NrZXRUaW1lb3V0KTtcbiAgICB9KTtcbiAgICB0aGlzLnNlcnZlciA9IHdzcztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGFyc2VXZWJTb2NrZXQge1xuICB3czogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHdzOiBhbnkpIHtcbiAgICB0aGlzLndzID0gd3M7XG4gIH1cblxuICBvbih0eXBlOiBzdHJpbmcsIGNhbGxiYWNrKTogdm9pZCB7XG4gICAgY29uc3Qgd3NUeXBlID0gdHlwZU1hcC5oYXModHlwZSkgPyB0eXBlTWFwLmdldCh0eXBlKSA6IHR5cGU7XG4gICAgdGhpcy53cy5vbih3c1R5cGUsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHNlbmQobWVzc2FnZTogYW55KTogdm9pZCB7XG4gICAgdGhpcy53cy5zZW5kKG1lc3NhZ2UpO1xuICB9XG59XG4iXX0=